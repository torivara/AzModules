name: 'AzModules - Deploy resources to Azure'
description: 'Manage IaC Modules Life-cycle using Idempotent modules.'
branding:
  icon: 'cloud-lightning'
  color: 'blue'

inputs:
  Action:
    description: 'The action to perform. WhatIf, Validate, Deploy, Remove. Default: Deploy'
    required: false
    default: Deploy
  ResourceGroupName:
    description: 'Target Resource Group to deploy resources to. Default: env.ResourceGroupName'
    required: false
  Subscription:
    description: 'Subscription ID or name to deploy resources to. Default: env.Subscription'
    required: false
  ManagementGroupID:
    description: 'Target Management Group to deploy resources to. Default: env.ManagementGroupID'
    required: false
  Location:
    description: 'Azure location for where to deploy resources. Default: env.Location'
    required: false
  ModulesPath:
    description: 'Path to a custom module library, structured as /$ModuleName/$ModuleVersion/deploy.*. Default: env.ModulesPath'
    required: false
  ModuleName:
    description: 'Name and version of module. ResourceGroup.  Default: env.ModuleName'
    required: false
  ModuleVersion:
    description: 'Name and version of module. 1.0.  Default: env.ModuleVersion'
    required: false
  ParameterFilePath:
    description: 'Path to Parameter file. Will deploy based on single parameter file. Need to use either this or ParametersFolderPath. Default: env.ParameterFilePath'
    required: false
  ParameterFolderPath:
    description: 'Path to Parameter folder. Will deploy based on multiple parameter files.  Need to use either this or ParameterFilePath. Default: env.ParameterFolderPath'
    required: false
  ParameterOverrides:
    description: 'Parameter overrides. Provided as expected by AzCLI. Default: env.ParameterOverrides'
    required: false
  Retries:
    description: 'Number of retries in case of failed attempts. Default: env.Retries'
    required: false
    default: 5
  RetryInterval:
    description: 'Number of seconds between retries. Default: env.RetryInterval'
    required: false
    default: 10

outputs:
  Output:
    description: 'Output from the action, as a compressed json data structure.'
    value: ${{ steps.AzModules.outputs.Output }}

runs:
  using: 'composite'
  steps:
    - name: Download AzUtilities
      shell: pwsh
      run: |
        Write-Output '::group::Download AzUtilities'
        $env:PSModulePath -split $([System.IO.Path]::PathSeparator)
        $InstallPath = $env:PSModulePath -split $([System.IO.Path]::PathSeparator) | Select-Object -First 1
        if (! (Test-Path -Path $InstallPath)){
            try {
                Write-Output "$InstallPath not found, creating"
                New-Item -Path $InstallPath -ItemType "directory" -Force | Out-Null
            } catch {
                throw "$InstallPath creating failed"
            }
        }
        Write-Output "InstallPath: $InstallPath"

        New-Item -Path "$InstallPath\Utils" -ItemType "directory" -Force | Out-Null
        Invoke-WebRequest -OutFile "$InstallPath\Utils\Utils.psm1" -Uri "https://raw.githubusercontent.com/equinor/AzUtilities/main/Modules/Utils/Utils.psm1"
        Invoke-WebRequest -OutFile "$InstallPath\Utils\Utils.psd1" -Uri "https://raw.githubusercontent.com/equinor/AzUtilities/main/Modules/Utils/Utils.psd1"

    - id: AzModules
      shell: pwsh
      run: |
        New-GitHubLogGroup -Title "AzModules-Initializing"

        Write-Output '-------------------------------------------'
        Write-Output 'Environment variables:'
        $env = @{
            Action              = $env:Action
            ResourceGroupName   = $env:ResourceGroupName
            Subscription        = $env:Subscription
            ManagementGroupID   = $env:ManagementGroupID
            Location            = $env:Location
            ModulesPath         = $env:ModulesPath
            ModuleName          = $env:ModuleName
            ModuleVersion       = $env:ModuleVersion
            ParameterFilePath   = $env:ParameterFilePath
            ParameterFolderPath = $env:ParameterFolderPath
            Retries             = $env:Retries
            RetryInterval       = $env:RetryInterval
            ParameterOverrides  = $env:ParameterOverrides
        }
        $env.GetEnumerator() | Sort-Object -Property Name

        Write-Output '-------------------------------------------'
        Write-Output 'Action inputs:'
        $inputs = @{
            Action              = '${{ inputs.Action }}'
            ResourceGroupName   = '${{ inputs.ResourceGroupName }}'
            Subscription        = '${{ inputs.Subscription }}'
            ManagementGroupID   = '${{ inputs.ManagementGroupID }}'
            Location            = '${{ inputs.Location }}'
            ModulesPath         = '${{ inputs.ModulesPath }}'
            ModuleName          = '${{ inputs.ModuleName }}'
            ModuleVersion       = '${{ inputs.ModuleVersion }}'
            ParameterFilePath   = '${{ inputs.ParameterFilePath }}'
            ParameterFolderPath = '${{ inputs.ParameterFolderPath }}'
            Retries             = '${{ inputs.Retries }}'
            RetryInterval       = '${{ inputs.RetryInterval }}'
            ParameterOverrides  = '${{ inputs.ParameterOverrides }}'
        }
        $inputs.GetEnumerator() | Sort-Object -Property Name

        Write-Output '-------------------------------------------'
        Write-Output 'Executing with:'
        $Params = Merge-Hashtables -Main $env -Overrides $inputs
        $Params.GetEnumerator() | Sort-Object -Property Name

        . "$env:GITHUB_ACTION_PATH\Scripts\main.ps1" @Params

        Write-Output '::endgroup::'
